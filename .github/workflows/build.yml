name: Build static binaries

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    name: Build ${{ matrix.arch }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            lib_dir: x86_64-linux-gnu
            cc: gcc
            cxx: g++
            ld: ld
            system_processor: x86_64
          - arch: arm64
            lib_dir: aarch64-linux-gnu
            cc: aarch64-linux-gnu-gcc
            cxx: aarch64-linux-gnu-g++
            ld: aarch64-linux-gnu-ld
            system_processor: aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build toolchains and libraries
        run: |
          set -eux
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo dpkg --add-architecture arm64
            sudo sed -Ei 's/^deb (https?:)/deb [arch=amd64] \1/' /etc/apt/sources.list
            sudo sed -Ei 's/^deb-src (https?:)/deb-src [arch=amd64] \1/' /etc/apt/sources.list
            for source in /etc/apt/sources.list.d/*.list; do
              [ -e "$source" ] || continue
              sudo sed -Ei 's/^deb (https?:)/deb [arch=amd64] \1/' "$source" || true
              sudo sed -Ei 's/^deb-src (https?:)/deb-src [arch=amd64] \1/' "$source" || true
            done
            if compgen -G "/etc/apt/sources.list.d/*.sources" > /dev/null; then
              for source in /etc/apt/sources.list.d/*.sources; do
                sudo python3 - "$source" <<'PY'
import pathlib
import sys

path = pathlib.Path(sys.argv[1])
lines = path.read_text().splitlines()
if any(line.startswith("Architectures:") for line in lines):
    new_lines = ["Architectures: amd64" if line.startswith("Architectures:") else line for line in lines]
else:
    new_lines = []
    inserted = False
    for line in lines:
        new_lines.append(line)
        if not inserted and line.startswith("Types:"):
            new_lines.append("Architectures: amd64")
            inserted = True
    if not inserted:
        new_lines.append("Architectures: amd64")
path.write_text("\n".join(new_lines) + "\n")
PY
              done
            fi
            sudo tee /etc/apt/sources.list.d/arm64-ports.list >/dev/null <<'EOF'
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse
deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse
EOF
          fi
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            binutils \
            clang \
            cmake \
            rsync \
            zip \
            zlib1g-dev \
            libjemalloc-dev \
            libssl-dev \
            libboost-system-dev \
            libboost-filesystem-dev \
            libboost-thread-dev \
            libboost-context-dev \
            libboost-coroutine-dev \
            libboost-regex-dev
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y \
              gcc-aarch64-linux-gnu \
              g++-aarch64-linux-gnu \
              libc6-dev:arm64 \
              libgcc-12-dev:arm64 \
              libstdc++-12-dev:arm64 \
              zlib1g-dev:arm64 \
              libjemalloc-dev:arm64 \
              libssl-dev:arm64 \
              libboost-system-dev:arm64 \
              libboost-filesystem-dev:arm64 \
              libboost-thread-dev:arm64 \
              libboost-context-dev:arm64 \
              libboost-coroutine-dev:arm64 \
              libboost-regex-dev:arm64
          fi

      - name: Prepare third-party directory
        run: |
          set -eux
          THIRD_PARTY="$RUNNER_TEMP/third_party_${{ matrix.arch }}"
          mkdir -p "$THIRD_PARTY/boost/stage/lib" "$THIRD_PARTY/jemalloc/lib" "$THIRD_PARTY/jemalloc/include" "$THIRD_PARTY/openssl/include"

          rsync -a /usr/include/boost "$THIRD_PARTY/boost/"
          if [ -d /usr/include/jemalloc ]; then
            rsync -a /usr/include/jemalloc/ "$THIRD_PARTY/jemalloc/include/jemalloc/"
          fi

          if [ -d /usr/include/openssl ]; then
            rsync -a /usr/include/openssl/ "$THIRD_PARTY/openssl/include/openssl/"
          fi
          if [ -d /usr/include/${{ matrix.lib_dir }}/openssl ]; then
            rsync -a /usr/include/${{ matrix.lib_dir }}/openssl/ "$THIRD_PARTY/openssl/include/openssl/"
          fi

          LIB_DIR="/usr/lib/${{ matrix.lib_dir }}"
          if [ ! -d "$LIB_DIR" ]; then
            LIB_DIR="/usr/${{ matrix.lib_dir }}/lib"
          fi

          for lib in \
            libboost_system.a \
            libboost_coroutine.a \
            libboost_thread.a \
            libboost_context.a \
            libboost_regex.a \
            libboost_filesystem.a
          do
            cp "$LIB_DIR/$lib" "$THIRD_PARTY/boost/stage/lib/"
          done

          cp "$LIB_DIR/libjemalloc.a" "$THIRD_PARTY/jemalloc/lib/"
          cp "$LIB_DIR/libssl.a" "$THIRD_PARTY/openssl/"
          cp "$LIB_DIR/libcrypto.a" "$THIRD_PARTY/openssl/"
          if [ -f "$LIB_DIR/libz.a" ]; then
            cp "$LIB_DIR/libz.a" "$THIRD_PARTY/openssl/"
          fi

          echo "THIRD_PARTY_DIR=$THIRD_PARTY" >> "$GITHUB_ENV"

      - name: Configure CMake
        run: |
          set -eux
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.system_processor }} \
            -DCMAKE_C_COMPILER=${{ matrix.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DCMAKE_LINKER=${{ matrix.ld }}
        env:
          THIRD_PARTY_LIBRARY_DIR: ${{ env.THIRD_PARTY_DIR }}

      - name: Build
        run: |
          set -eux
          cmake --build build --config Release -j "$(nproc)"
        env:
          THIRD_PARTY_LIBRARY_DIR: ${{ env.THIRD_PARTY_DIR }}

      - name: Verify static binary
        run: |
          set -eux
          FILE_OUTPUT="$(file bin/ppp)"
          echo "$FILE_OUTPUT"
          if ! grep -q 'statically linked' <<<"$FILE_OUTPUT"; then
            echo "Binary is not reported as statically linked"
            exit 1
          fi
          if readelf -l bin/ppp | grep -q 'Requesting program interpreter'; then
            echo "Binary declares a dynamic loader"
            exit 1
          fi

      - name: Package artifact
        run: |
          set -eux
          cd bin
          ARTIFACT_NAME="openppp2-linux-${{ matrix.arch }}.zip"
          rm -f "$ARTIFACT_NAME"
          zip -r "$ARTIFACT_NAME" ppp

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: openppp2-linux-${{ matrix.arch }}
          path: bin/openppp2-linux-${{ matrix.arch }}.zip
