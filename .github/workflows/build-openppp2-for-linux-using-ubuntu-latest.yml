# Copyright  : Copyright (C) 2017 ~ 2035 SupersocksR ORG. All rights reserved.
# Description: PPP PRIVATE NETWORK™ 2 LINUX BUILD SCRIPT.(X) 1.0.0 VERSION.
# Author     : Kyou.
# Date-Time  : 2024/02/13

name: PPP PRIVATE NETWORK™ 2 LINUX BUILD SCRIPT.(X) 1.0.0 VERSION.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # ubuntu-22.04, ubuntu-20.04, ubuntu-18.04
        include:
          - arch: amd64
            platform: linux/amd64
            triple: x86_64-linux-gnu
            openssl_target: linux-x86_64
          - arch: aarch64
            platform: linux/aarch64
            triple: aarch64-linux-gnu
            openssl_target: linux-aarch64

    runs-on: ${{ matrix.os }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
    - name: Checkout openppp2
      run: git clone https://github.com/liulilittle/openppp2.git openppp2 # uses: actions/checkout@v2

    - name: Get number of cpus
      run: echo ::set-env name=ncpu::$(nproc)

    - name: Set THIRD_PARTY_LIBRARY_DIR environment variables
      run: |
        echo ::set-env name=THIRD_PARTY_LIBRARY_DIR::$GITHUB_WORKSPACE

    - name: Print environment variables
      run: echo "ncpu:$ncpu, THIRD_PARTY_LIBRARY_DIR:$THIRD_PARTY_LIBRARY_DIR"

    - name: Replace THIRD_PARTY_LIBRARY_DIR in CMakeFiles.txt.
      run: |
        cd openppp2
        sed -i 's/SET(THIRD_PARTY_LIBRARY_DIR \/root\/dev)/SET(THIRD_PARTY_LIBRARY_DIR $ENV{THIRD_PARTY_LIBRARY_DIR})/' CMakeLists.txt

    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install git build-essential lrzsz zip unzip libkrb5-dev libicu-dev screen iftop openssl libssl-dev libunwind8 iftop net-tools gcc gdb cmake curl wget g++ clang autoconf zlib1g-dev qemu-user-static -y
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu libc6-dev-arm64-cross -y
          sudo apt-get install libstdc++-12-dev-arm64-cross -y || \
          sudo apt-get install libstdc++-11-dev-arm64-cross -y || \
          sudo apt-get install libstdc++-13-dev-arm64-cross -y
        fi

    - name: Prepare toolchain
      run: |
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          echo "using gcc : cross : aarch64-linux-gnu-g++ ;" > $GITHUB_WORKSPACE/boost-user-config.jam
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "RANLIB=aarch64-linux-gnu-ranlib" >> $GITHUB_ENV
          echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
          echo "CMAKE_SYSTEM_PROCESSOR=aarch64" >> $GITHUB_ENV
          echo "CMAKE_SYSTEM_NAME=Linux" >> $GITHUB_ENV
          echo "BOOST_ARCH=arm" >> $GITHUB_ENV
          echo "JEMALLOC_HOST=aarch64-linux-gnu" >> $GITHUB_ENV
          echo "CROSS_COMPILE_PREFIX=${{ matrix.triple }}-" >> $GITHUB_ENV
        else
          echo "using gcc : cross : g++ ;" > $GITHUB_WORKSPACE/boost-user-config.jam
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          echo "AR=ar" >> $GITHUB_ENV
          echo "RANLIB=ranlib" >> $GITHUB_ENV
          echo "STRIP=strip" >> $GITHUB_ENV
          echo "BOOST_ARCH=x86" >> $GITHUB_ENV
          echo "JEMALLOC_HOST=" >> $GITHUB_ENV
          echo "CROSS_COMPILE_PREFIX=" >> $GITHUB_ENV
        fi

    - name: Build boost
      run: |
        wget https://archives.boost.io/release/1.86.0/source/boost_1_86_0.tar.bz2
        tar jxvf boost*.tar.bz2
        rm -rf boost*.tar.bz2
        mv boost* boost
        cd boost
        ./bootstrap.sh
        ./b2 toolset=gcc-cross target-os=linux architecture=$BOOST_ARCH address-model=64 binary-format=elf link=static runtime-link=static stage

    - name: Build jemalloc
      run: |
        wget https://github.com/jemalloc/jemalloc/releases/download/5.3.0/jemalloc-5.3.0.tar.bz2
        tar jxvf jemalloc*.tar.bz2
        rm -rf jemalloc*.tar.bz2
        mv jemalloc* jemalloc
        cd jemalloc
        CONFIGURE_FLAGS="--with-jemalloc-prefix=je_ --disable-shared --enable-static"
        if [ -n "$JEMALLOC_HOST" ]; then
          CONFIGURE_FLAGS="$CONFIGURE_FLAGS --host=$JEMALLOC_HOST"
        fi
        CC=$CC CXX=$CXX AR=$AR RANLIB=$RANLIB ./autogen.sh $CONFIGURE_FLAGS
        make -j $ncpu
        make install DESTDIR=$PWD/../jemalloc-install
        mkdir -p lib include
        cp -a ../jemalloc-install/usr/local/lib/* lib/
        cp -a ../jemalloc-install/usr/local/include/* include/

    - name: Build openssl
      run: |
        wget https://www.openssl.org/source/openssl-3.0.13.tar.gz
        tar zxvf openssl*.tar.gz
        rm -rf openssl*.tar.gz
        mv openssl* openssl
        cd openssl
        EXTRA_CONFIG=""
        if [ -n "${CROSS_COMPILE_PREFIX:-}" ]; then
          EXTRA_CONFIG="--cross-compile-prefix=$CROSS_COMPILE_PREFIX"
        fi
        CC=$CC AR=$AR RANLIB=$RANLIB ./Configure ${{ matrix.openssl_target }} no-shared --prefix=$PWD --openssldir=$PWD $EXTRA_CONFIG
        make -j $ncpu

    - name: Build openppp2
      run: |
        PLATFORM=${{ matrix.platform }}
        PLATFORM=${PLATFORM//\//-}

        cd openppp2
        mkdir -p build
        cd build
        CMAKE_ARGS=(
          -DCMAKE_BUILD_TYPE=Release
          "-DCMAKE_EXE_LINKER_FLAGS=-static -static-libgcc -static-libstdc++ -Wl,-Bstatic"
          -DCMAKE_C_COMPILER=$CC
          -DCMAKE_CXX_COMPILER=$CXX
          -DCMAKE_AR=$AR
          -DCMAKE_RANLIB=$RANLIB
        )
        if [ -n "${CMAKE_SYSTEM_NAME:-}" ]; then
          CMAKE_ARGS+=(-DCMAKE_SYSTEM_NAME=$CMAKE_SYSTEM_NAME -DCMAKE_SYSTEM_PROCESSOR=$CMAKE_SYSTEM_PROCESSOR)
        fi
        cmake .. "${CMAKE_ARGS[@]}"
        make -j $ncpu
        cd ../bin

        file ppp
        ldd ppp || true
        ${STRIP:-strip} -s ppp

        ARTIFACT_NAME=openppp2-$PLATFORM.zip
        zip -r $ARTIFACT_NAME ppp
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

    - name: Archive openppp2
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: openppp2/bin/${{ env.ARTIFACT_NAME }}
